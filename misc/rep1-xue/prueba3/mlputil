#!/usr/bin/env python

from pyfann import libfann
import argparse
import sys
import random
import math

connection_rate = 1
learning_rate = 0.2
num_input = 32
num_hidden = 4
num_output = 1

desired_error = 0.15
max_iterations = 100000
iterations_between_reports = 1000

def train( infile, modelfile ):
    ann = libfann.neural_net()
    ann.create_sparse_array(connection_rate, (num_input, num_hidden, num_output))
    ann.set_learning_rate(learning_rate)
    ann.set_activation_function_output(libfann.SIGMOID_SYMMETRIC_STEPWISE)

    ann.train_on_file(infile.name, max_iterations, iterations_between_reports, desired_error)
    
    if modelfile is None:
        ann.save(infile.name+'.fann-model')
    else:
        ann.save(modelfile)

def test( infile, modelfile, resultsfile ):
    ann = libfann.neural_net()
    ann.create_from_file(modelfile.name)
    ann.test(infile.name)


# wrapper para las funciones
def wrap_train (obj):
    train(obj.file, obj.outfile)

def wrap_test(obj):
    test(obj.file, obj.modelfile, obj.outfile)



parser = argparse.ArgumentParser( description='libFANN multi-layer perceptron python utility.',
                                  prog='mlputil')

parser.add_argument( '--verbose', '-v',
                     action='count',
                     help='increase verbosity level')

subp   = parser.add_subparsers()
trainp = subp.add_parser('train',
                         description="create mlp and train on input files")
testp  = subp.add_parser('test',
                         description="test mlp")

trainp.add_argument ('file',
                    type=argparse.FileType('r'),
                    help='input file(s)')
trainp.add_argument ('--outfile', '-o',
                    type=argparse.FileType('w'),
                    nargs='?',
                    default=None,
                    help="model file to write to")

testp.add_argument  ('file',
                    type=argparse.FileType('r'),
                    help='input file(s)')
testp.add_argument  ('modelfile',
                    type=argparse.FileType('r'),
                    help='model file(s)')
testp.add_argument  ('--outfile', '-o',
                    type=argparse.FileType('w'),
                    nargs='?',
                    default=None,
                    help=" file where to write the classification results")

trainp.set_defaults(func=wrap_train)
testp.set_defaults(func=wrap_test)

verbosity = 0

obj = parser.parse_args()

if obj.verbose is not None:
    verbosity = obj.verbose

obj.func(obj)
