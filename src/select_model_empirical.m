function [svm_params,out,paramh,errh,ntrain] = select_model_empirical( ...
    problem, feats, kernel, lib, theta0, max_it)
%SELECT_MODEL_EMPIRICAL Select SVM model with Empirical Error Criterion method
%
%  [SVM_PARAMS,MODEL,PARAMH,ERRH,NTRAIN] = SELECT_MODEL_EMPIRICAL(PROBLEM, ...
%      FEATS, KERNEL, LIB, THETA0, MAX_IT) performs SVM model selection by
%  minimizing the ERROR_EMPIRICAL_CV objective function with the OPT_BFGS
%  optimization method.
%  Input arguments, (*)=optional:
%    PROBLEM the problem with trained data generated by PROBLEM_GEN
%    FEATS the featureset index, commonly 5 or 8
%    KERNEL a string with value 'linear' for linear kernel or 'rbf' for RBF
%    LIB the SVM library to be used, either 'libsvm' or 'matlab'
%    THETA0 (*) starting value for the SVM params
%    MAX_IT (*) maximum number of iterations for the gradient descent algorithm
%  Output arguments:
%    SVM_PARAMS the optimal SVM parameters found
%    MODEL the optimal trained model
%    PARAMH the parameter history for each iteration
%    ERRH the empirical risk value (objective function) in each iteration
%    NTRAIN the number of SVM trainings performed
%
%  The 'Empirical Error Criterion' is presented in [1], [2], and this
%  implementation incorporates some modifications allowing it to work with
%  'vanilla' linear and RBF kernels, by computing the derivatives w.r.t. the C
%  SVM parameter in the MODEL_CSVM function.
%
%  [1] Ayat et al., "Automatic model selection for the optimization of SVM
%      kernels" (2005)
%  [2] Adankon & Cheriet, "Unified framework for SVM model selection", Chapter
%      7 in "Hands-On Pattern Recognition Challenges in Machine Learning" eds.
%      Guyon et al. (2009)
%
%  See also PROBLEM_GEN, SELECT_MODEL, MODEL_CSVM, ERROR_EMPIRICAL_CV.
%

    if nargin < 6 || isempty(max_it), max_it = 100; end

    % MISC SETTINGS
    svm_tol = 1e-6;
    gtol = svm_tol/10^(log10(svm_tol)/3);
    stop_delta = svm_tol/10^(log10(svm_tol)/2);

    features = featset_index(feats);
    kernel = get_kernel(kernel);

    target = problem.trainlabels;
    input = problem.traindata;

    time = time_init();
    time = time_tick(time, 1);

    % initial parameter vector
    if nargin > 4 && ~isempty(theta0), theta = theta0;
    elseif strfind(kernel,'rbf') theta = [0 0];
    else theta = 0;
    end

    % train function
    trainfunc = @(input,target,theta) mysvm_train( ...
        lib, kernel, input, target, theta(1), theta(2:end), ...
        false, ... % autoscale
        svm_tol ...
        );

    % test function
    testfunc = @(model, input) model_csvm( ...
        model, input, ...
        true, ... % decision values
        true, ... % c_log (for derivative)
        true ...  % kparam_log (for derivative)
        );

    % test function derivative
    testfunc_deriv = @(model, input) model_csvm_deriv( ...
        model, input, ...
        true, ... % decision values
        true, ... % c_log (for derivative)
        true ...  % kparam_log (for derivative)
        );

    % error (objective) function
    err_func = @(theta) error_empirical_cv(trainfunc, testfunc, ...
                                           testfunc_deriv, exp(theta), ...
                                           problem, features);

    % optimize error function
    [svm_params,~,paramh,errh,ntrain] = opt_bfgs(err_func, false, theta, ...
                                                 100*svm_tol, max_it);

    % Build output model
    out = struct();
    out.features = features;
    out.trainfunc = func2str(@(in,tg) mysvm_train( lib, kernel, in, tg, ...
            exp(svm_params(1)), exp(svm_params(2:end)), false, svm_tol ));
    out.trainfuncargs = struct();
    out.trainfuncargs.lib = lib;
    out.trainfuncargs.kernel = kernel;
    out.trainfuncargs.svm_params = svm_params;
    out.trainfuncargs.svm_tol = svm_tol;
    out.classfunc = 'mysvm_classify';
    out.trainedmodel = mysvm_train( lib, kernel, problem.traindata(:,features), ...
                                    problem.trainlabels, exp(svm_params(1)), ...
                                    exp(svm_params(2:end)), false, svm_tol );

    time = time_tick(time, 1);

end
