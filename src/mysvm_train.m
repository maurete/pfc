function model = mysvm_train( lib, kfun, samples, labels, boxconstraint, kfun_param, ...
                              autoscale, tolkkt, prob_estimates, varargin )

    if nargin < 9; prob_estimates = false; end
    if nargin < 8; tolkkt         = 1e-6;  end
    if nargin < 7; autoscale      = false; end
    if nargin < 6; kfun_param     = [];    end
    if nargin < 5; boxconstraint  = 1;     end

    LIBSVM_DIR = './libsvm-3.20/matlab/';

    kernel_function = [];

    Nplus  = sum(labels>0);
    Nminus = sum(labels<0);
    N      = length(labels);
    Cplus  = boxconstraint*(N/(2*Nplus));
    Cminus = boxconstraint*(N/(2*Nminus));

    if strncmpi(lib, 'matlab', 6)
        if isempty(strfind(which('svmtrain'),'bioinfo'))
            rmpath(LIBSVM_DIR);
        end
        assert(any(strfind(which('svmtrain'),'bioinfo')), ...
               'mysvm_train: failed to load Matlab bioinfo svmtrain.')

        cache_size = 5000;

        if isa(kfun,'function_handle')
            model = svmtrain( samples, labels, ...
                              'boxconstraint', boxconstraint, ...
                              'autoscale', autoscale, ...
                              'tolkkt', tolkkt, ...
                              'kernel_function', @(x,y) kfun(x,y,kfun_param));
            kernel_function = kfun;

        elseif isa(kfun,'char')
            if strcmp(kfun, 'rbf')
                model = svmtrain( samples, labels, ...
                                  'boxconstraint', boxconstraint, ...
                                  'autoscale', autoscale, ...
                                  'tolkkt', tolkkt, ...
                                  'kernel_function', @(x,y) kernel_rbf(x,y,kfun_param));
                kernel_function = @kernel_rbf;
            elseif strcmp(kfun, 'linear')
                model = svmtrain( samples, labels, ...
                                  'boxconstraint', boxconstraint, ...
                                  'autoscale', autoscale, ...
                                  'tolkkt', tolkkt, ...
                                  'kernel_function', @kernel_linear);
                kernel_function = @kernel_linear;
            elseif strcmp(kfun, 'rbf_uni')
                model = svmtrain( samples, labels, ...
                                  'boxconstraint', boxconstraint, ...
                                  'autoscale', autoscale, ...
                                  'tolkkt', tolkkt, ...
                                  'kernel_function', @(x,y) kernel_rbf_uni(x,y,kfun_param));
                kernel_function = @kernel_rbf_uni;
            elseif strcmp(kfun, 'linear_uni')
                model = svmtrain( samples, labels, ...
                                  'boxconstraint', boxconstraint, ...
                                  'autoscale', autoscale, ...
                                  'tolkkt', tolkkt, ...
                                  'kernel_function', @(x,y) kernel_linear_uni(x,y,kfun_param));
                kernel_function = @kernel_linear_uni;
            elseif strcmp(kfun, 'rbf_unc')
                model = svmtrain( samples, labels, ...
                                  'boxconstraint', boxconstraint, ...
                                  'autoscale', autoscale, ...
                                  'tolkkt', tolkkt, ...
                                  'kernel_function', @(x,y) kernel_rbf_unc(x,y,kfun_param));
                kernel_function = @kernel_rbf_unc;
            else
                error( 'mysvm_train: selected kernel not recognized.\n' );
            end
        end

        model.sv_     = model.SupportVectors;
        model.nsv_    = length(model.SupportVectorIndices);
        model.svi_    = model.SupportVectorIndices;
        model.alpha_  = model.Alpha;
        model.bias_   = model.Bias;
        model.lib_    = 'matlab';
        model.tolkkt_ = tolkkt;
        model.cache_  = cache_size; % sqrt( N ) * size(double)

    elseif strncmpi(lib, 'libsvm', 6)
        if isempty(strfind(which('svmtrain'),'libsvm'))
            addpath(LIBSVM_DIR);
        end
        assert(any(strfind(which('svmtrain'),'libsvm')), ...
               'mysvm_train: failed to load libSVM svmtrain.')

        cache_size = 200;

        wstr = sprintf(' -w1 %f -w-1 %f ', N/(2*Nplus), N/(2*Nminus));

        if isa(kfun,'function_handle')
            % should compute kernel by hand
            K1 = [ [1:size(samples,1)]' kfun(samples,samples,kfun_param) ];
            model = svmtrain( labels, K1, [ '-t 4 ' ...
                                ' -c ' num2str(boxconstraint) ...
                                ' -e ' num2str(tolkkt) ...
                                ' -m ' num2str(cache_size) ...
                                ' -b ' num2str(prob_estimates) ...
                                wstr, ...
                                ' -q ' ] );
            kernel_function = kfun;

        elseif isa(kfun,'char')
            if strcmp(kfun, 'rbf')
                model = svmtrain( labels, samples, [ ' -t 2 ' ...
                                    ' -c ' num2str(boxconstraint) ...
                                    ' -g ' num2str(kfun_param) ...
                                    ' -e ' num2str(tolkkt) ...
                                    ' -m ' num2str(cache_size) ...
                                    ' -b ' num2str(prob_estimates) ...
                                    wstr, ...
                                    ' -q ' ] );
                kernel_function = @kernel_rbf;
            elseif strcmp(kfun, 'linear')
                model = svmtrain( labels, samples, [ ' -t 0 ' ...
                                    ' -c ' num2str(boxconstraint)...
                                    ' -e ' num2str(tolkkt) ...
                                    ' -m ' num2str(cache_size) ...
                                    ' -b ' num2str(prob_estimates) ...
                                    wstr, ...
                                    ' -q ' ] );
                kernel_function = @kernel_linear;
            elseif strcmp(kfun, 'rbf_uni')
                K1 = [ [1:size(samples,1)]' kernel_rbf_uni(samples,samples,kfun_param) ];
                model = svmtrain( labels, K1, [ '-t 4 ' ...
                                    ' -c ' num2str(boxconstraint) ...
                                    ' -e ' num2str(tolkkt) ...
                                    ' -m ' num2str(cache_size) ...
                                    ' -b ' num2str(prob_estimates) ...
                                    wstr, ...
                                    ' -q ' ] );
                kernel_function = @kernel_rbf_uni;
            elseif strcmp(kfun, 'rbf_unc')
                K1 = [ [1:size(samples,1)]' kernel_rbf_unc(samples,samples,kfun_param) ];
                model = svmtrain( labels, K1, [ '-t 4 ' ...
                                    ' -c ' num2str(boxconstraint) ...
                                    ' -e ' num2str(tolkkt) ...
                                    ' -m ' num2str(cache_size) ...
                                    ' -b ' num2str(prob_estimates) ...
                                    wstr, ...
                                    ' -q ' ] );
                kernel_function = @kernel_rbf_unc;
            elseif strcmp(kfun, 'linear_uni')
                K1 = [ [1:size(samples,1)]' kernel_linear_uni(samples,samples,kfun_param) ];
                model = svmtrain( labels, K1, [ ' -t 4 ' ...
                                    ' -c ' num2str(boxconstraint) ...
                                    ' -e ' num2str(tolkkt) ...
                                    ' -m ' num2str(cache_size) ...
                                    ' -b ' num2str(prob_estimates) ...
                                    wstr, ...
                                    ' -q ' ] );
                kernel_function = @kernel_linear_uni;
            else
                error( 'mysvm_train: selected kernel not recognized: %s.\n', kfun );
            end
        end

        model.sv_     = full(model.SVs);
        if (exist('K1') == 1), model.sv_ = samples(model.SVs,:); end
        model.nsv_    = model.totalSV;
        model.svi_    = model.sv_indices;
        model.alpha_  = model.sv_coef;
        model.bias_   = model.rho;
        model.lib_    = 'libsvm';
        model.tolkkt_ = tolkkt;
        model.cache_  = cache_size;

    else
        error( 'mysvm_train: selected library %s or kernel function %s not recognized.\n', ...
               lib, kfun);
    end

    % in calculations it is assumed that sign(alpha) == class(sv)
    if sign(model.alpha_)'*labels(model.svi_) < 0,
        model.alpha_ = -model.alpha_;
    end

    % find free bounded support vectors
    sviplus  = labels(model.svi_) > 0;
    sviminus = labels(model.svi_) < 0;
    bsv = false(size(model.svi_));
    bsv(sviplus)  = Cplus  - abs(model.alpha_(sviplus)) < sqrt(tolkkt);
    bsv(sviminus) = Cminus - abs(model.alpha_(sviminus)) < sqrt(tolkkt);

    % extra model information
    model.bsv_     = bsv;
    model.nbsv_    = sum(bsv);
    model.cplus_   = Cplus;
    model.cminus_  = Cminus;
    model.svclass_ = labels(model.svi_);
    model.kernel_  = kfun;
    model.kfunc_   = kernel_function;
    model.C_       = boxconstraint;
    model.kparam_  = kfun_param;

    % validation checks
    if abs(sum(model.alpha_)) > tolkkt,
        warning('sum(alpha*y) = %f', sum(model.alpha_))
    end

    if any(sign(model.alpha_) ~= model.svclass_),
        warning('sign(alpha_i) != class(sv_i)')
    end

    % if model.nbsv_ == 0,
    %     warning('no bounded vectors: c+=%f, c-=%f, max(alpha)=%f, min(alpha)=%f', ...
    %             Cplus, Cminus, max(model.alpha_), min(model.alpha_))
    % end

end
